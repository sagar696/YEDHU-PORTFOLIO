{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nvar _excluded = [\"name\", \"disabled\", \"readOnly\", \"autoComplete\", \"style\", \"className\", \"inputRef\", \"inputComponent\", \"numberInputProps\", \"smartCaret\", \"countrySelectComponent\", \"countrySelectProps\", \"containerComponent\", \"defaultCountry\", \"countries\", \"countryOptionsOrder\", \"labels\", \"flags\", \"flagComponent\", \"flagUrl\", \"addInternationalOption\", \"internationalIcon\", \"displayInitialValueAsLocalNumber\", \"initialValueFormat\", \"onCountryChange\", \"limitMaxLength\", \"countryCallingCodeEditable\", \"focusInputOnCountrySelection\", \"reset\", \"metadata\", \"international\", \"locales\"];\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport InputSmart from './InputSmart.js';\nimport InputBasic from './InputBasic.js';\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect.js';\nimport Flag from './Flag.js';\nimport InternationalIcon from './InternationalIcon.js';\nimport { sortCountryOptions, isCountrySupportedWithError, getSupportedCountries, getSupportedCountryOptions, getCountries } from './helpers/countries.js';\nimport { createCountryIconComponent } from './CountryIcon.js';\nimport { metadata as metadataPropType, labels as labelsPropType } from './PropTypes.js';\nimport { getPreSelectedCountry, getCountrySelectOptions as _getCountrySelectOptions, parsePhoneNumber, generateNationalNumberDigits, getPhoneDigitsForNewCountry, getInitialPhoneDigits, onPhoneDigitsChange, e164 } from './helpers/phoneInputHelpers.js';\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js';\nvar PhoneNumberInput_ = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(PhoneNumberInput_, _React$PureComponent);\n  var _super = _createSuper(PhoneNumberInput_);\n  function PhoneNumberInput_(props) {\n    var _this;\n    _classCallCheck(this, PhoneNumberInput_);\n    _this = _super.call(this, props);\n    _defineProperty(_assertThisInitialized(_this), \"setInputRef\", function (instance) {\n      _this.inputRef.current = instance;\n      var ref = _this.props.inputRef;\n      if (ref) {\n        if (typeof ref === 'function') {\n          ref(instance);\n        } else {\n          ref.current = instance;\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"isCountrySupportedWithError\", function (country) {\n      var metadata = _this.props.metadata;\n      return isCountrySupportedWithError(country, metadata);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCountryChange\", function (newCountry) {\n      var _this$props = _this.props,\n        international = _this$props.international,\n        metadata = _this$props.metadata,\n        onChange = _this$props.onChange,\n        focusInputOnCountrySelection = _this$props.focusInputOnCountrySelection;\n      var _this$state = _this.state,\n        prevPhoneDigits = _this$state.phoneDigits,\n        prevCountry = _this$state.country; // After the new `country` has been selected,\n      // if the phone number `<input/>` holds any digits\n      // then migrate those digits for the new `country`.\n\n      var newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\n        prevCountry: prevCountry,\n        newCountry: newCountry,\n        metadata: metadata,\n        // Convert the phone number to \"national\" format\n        // when the user changes the selected country by hand.\n        useNationalFormat: !international\n      });\n      var newValue = e164(newPhoneDigits, newCountry, metadata); // Focus phone number `<input/>` upon country selection.\n\n      if (focusInputOnCountrySelection) {\n        _this.inputRef.current.focus();\n      } // If the user has already manually selected a country\n      // then don't override that already selected country\n      // if the `defaultCountry` property changes.\n      // That's what `hasUserSelectedACountry` flag is for.\n\n      _this.setState({\n        country: newCountry,\n        hasUserSelectedACountry: true,\n        phoneDigits: newPhoneDigits,\n        value: newValue\n      }, function () {\n        // Update the new `value` property.\n        // Doing it after the `state` has been updated\n        // because `onChange()` will trigger `getDerivedStateFromProps()`\n        // with the new `value` which will be compared to `state.value` there.\n        onChange(newValue);\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (_phoneDigits) {\n      var _this$props2 = _this.props,\n        defaultCountry = _this$props2.defaultCountry,\n        onChange = _this$props2.onChange,\n        addInternationalOption = _this$props2.addInternationalOption,\n        international = _this$props2.international,\n        limitMaxLength = _this$props2.limitMaxLength,\n        countryCallingCodeEditable = _this$props2.countryCallingCodeEditable,\n        metadata = _this$props2.metadata;\n      var _this$state2 = _this.state,\n        countries = _this$state2.countries,\n        prevPhoneDigits = _this$state2.phoneDigits,\n        currentlySelectedCountry = _this$state2.country;\n      var _onPhoneDigitsChange = onPhoneDigitsChange(_phoneDigits, {\n          prevPhoneDigits: prevPhoneDigits,\n          country: currentlySelectedCountry,\n          countryRequired: !addInternationalOption,\n          defaultCountry: defaultCountry,\n          getAnyCountry: function getAnyCountry() {\n            return _this.getFirstSupportedCountry({\n              countries: countries\n            });\n          },\n          countries: countries,\n          international: international,\n          limitMaxLength: limitMaxLength,\n          countryCallingCodeEditable: countryCallingCodeEditable,\n          metadata: metadata\n        }),\n        phoneDigits = _onPhoneDigitsChange.phoneDigits,\n        country = _onPhoneDigitsChange.country,\n        value = _onPhoneDigitsChange.value;\n      var stateUpdate = {\n        phoneDigits: phoneDigits,\n        value: value,\n        country: country\n      };\n      if (countryCallingCodeEditable === false) {\n        // If it simply did `setState({ phoneDigits: intlPrefix })` here,\n        // then it would have no effect when erasing an inital international prefix\n        // via Backspace, because `phoneDigits` in `state` wouldn't change\n        // as a result, because it was `prefix` and it became `prefix`,\n        // so the component wouldn't rerender, and the user would be able\n        // to erase the country calling code part, and that part is\n        // assumed to be non-eraseable. That's why the component is\n        // forcefully rerendered here.\n        // https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\n        if (!value && phoneDigits === _this.state.phoneDigits) {\n          // Force a re-render of the `<input/>` in order to reset its value.\n          stateUpdate.forceRerender = {};\n        }\n      }\n      _this.setState(stateUpdate,\n      // Update the new `value` property.\n      // Doing it after the `state` has been updated\n      // because `onChange()` will trigger `getDerivedStateFromProps()`\n      // with the new `value` which will be compared to `state.value` there.\n      function () {\n        return onChange(value);\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_onFocus\", function () {\n      return _this.setState({\n        isFocused: true\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_onBlur\", function () {\n      return _this.setState({\n        isFocused: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function (event) {\n      _this._onFocus();\n      var onFocus = _this.props.onFocus;\n      if (onFocus) {\n        onFocus(event);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function (event) {\n      var onBlur = _this.props.onBlur;\n      _this._onBlur();\n      if (onBlur) {\n        onBlur(event);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCountryFocus\", function (event) {\n      _this._onFocus(); // this.setState({ countrySelectFocused: true })\n\n      var countrySelectProps = _this.props.countrySelectProps;\n      if (countrySelectProps) {\n        var onFocus = countrySelectProps.onFocus;\n        if (onFocus) {\n          onFocus(event);\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCountryBlur\", function (event) {\n      _this._onBlur(); // this.setState({ countrySelectFocused: false })\n\n      var countrySelectProps = _this.props.countrySelectProps;\n      if (countrySelectProps) {\n        var onBlur = countrySelectProps.onBlur;\n        if (onBlur) {\n          onBlur(event);\n        }\n      }\n    });\n    _this.inputRef = /*#__PURE__*/React.createRef();\n    var _this$props3 = _this.props,\n      _value = _this$props3.value,\n      labels = _this$props3.labels,\n      _international = _this$props3.international,\n      _addInternationalOption = _this$props3.addInternationalOption,\n      displayInitialValueAsLocalNumber = _this$props3.displayInitialValueAsLocalNumber,\n      initialValueFormat = _this$props3.initialValueFormat,\n      _metadata = _this$props3.metadata;\n    var _this$props4 = _this.props,\n      _defaultCountry = _this$props4.defaultCountry,\n      _countries = _this$props4.countries; // Validate `defaultCountry`.\n\n    if (_defaultCountry) {\n      if (!_this.isCountrySupportedWithError(_defaultCountry)) {\n        _defaultCountry = undefined;\n      }\n    } // Validate `countries`.\n\n    _countries = getSupportedCountries(_countries, _metadata);\n    var phoneNumber = parsePhoneNumber(_value, _metadata);\n    _this.CountryIcon = createCountryIconComponent(_this.props);\n    var preSelectedCountry = getPreSelectedCountry({\n      value: _value,\n      phoneNumber: phoneNumber,\n      defaultCountry: _defaultCountry,\n      required: !_addInternationalOption,\n      countries: _countries || getCountries(_metadata),\n      getAnyCountry: function getAnyCountry() {\n        return _this.getFirstSupportedCountry({\n          countries: _countries\n        });\n      },\n      metadata: _metadata\n    });\n    _this.state = {\n      // Workaround for `this.props` inside `getDerivedStateFromProps()`.\n      props: _this.props,\n      // The country selected.\n      country: preSelectedCountry,\n      // `countries` are stored in `this.state` because they're filtered.\n      // For example, a developer might theoretically pass some unsupported\n      // countries as part of the `countries` property, and because of that\n      // the component uses `this.state.countries` (which are filtered)\n      // instead of `this.props.countries`\n      // (which could potentially contain unsupported countries).\n      countries: _countries,\n      // `phoneDigits` state property holds non-formatted user's input.\n      // The reason is that there's no way of finding out\n      // in which form should `value` be displayed: international or national.\n      // E.g. if `value` is `+78005553535` then it could be input\n      // by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n      // Hence storing just `value` is not sufficient for correct formatting.\n      // E.g. if a user entered `8 (800) 555-35-35`\n      // then value is `+78005553535` and `phoneDigits` are `88005553535`\n      // and if a user entered `+7 800 555 35 35`\n      // then value is `+78005553535` and `phoneDigits` are `+78005553535`.\n      phoneDigits: getInitialPhoneDigits({\n        value: _value,\n        phoneNumber: phoneNumber,\n        defaultCountry: _defaultCountry,\n        international: _international,\n        useNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n        metadata: _metadata\n      }),\n      // `value` property is duplicated in state.\n      // The reason is that `getDerivedStateFromProps()`\n      // needs this `value` to compare to the new `value` property\n      // to find out if `phoneDigits` needs updating:\n      // If the `value` property was changed externally\n      // then it won't be equal to `state.value`\n      // in which case `phoneDigits` and `country` should be updated.\n      value: _value\n    };\n    return _this;\n  }\n  _createClass(PhoneNumberInput_, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var onCountryChange = this.props.onCountryChange;\n      var defaultCountry = this.props.defaultCountry;\n      var selectedCountry = this.state.country;\n      if (onCountryChange) {\n        if (defaultCountry) {\n          if (!this.isCountrySupportedWithError(defaultCountry)) {\n            defaultCountry = undefined;\n          }\n        }\n        if (selectedCountry !== defaultCountry) {\n          onCountryChange(selectedCountry);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var onCountryChange = this.props.onCountryChange;\n      var country = this.state.country; // Call `onCountryChange` when user selects another country.\n\n      if (onCountryChange && country !== prevState.country) {\n        onCountryChange(country);\n      }\n    }\n  }, {\n    key: \"getCountrySelectOptions\",\n    value: function getCountrySelectOptions(_ref) {\n      var countries = _ref.countries;\n      var _this$props5 = this.props,\n        international = _this$props5.international,\n        countryCallingCodeEditable = _this$props5.countryCallingCodeEditable,\n        countryOptionsOrder = _this$props5.countryOptionsOrder,\n        addInternationalOption = _this$props5.addInternationalOption,\n        labels = _this$props5.labels,\n        locales = _this$props5.locales,\n        metadata = _this$props5.metadata;\n      return this.useMemoCountrySelectOptions(function () {\n        return sortCountryOptions(_getCountrySelectOptions({\n          countries: countries || getCountries(metadata),\n          countryNames: labels,\n          addInternationalOption: international && countryCallingCodeEditable === false ? false : addInternationalOption,\n          compareStringsLocales: locales // compareStrings\n        }), getSupportedCountryOptions(countryOptionsOrder, metadata));\n      }, [countries, countryOptionsOrder, addInternationalOption, labels, metadata]);\n    }\n  }, {\n    key: \"useMemoCountrySelectOptions\",\n    value: function useMemoCountrySelectOptions(generator, dependencies) {\n      if (!this.countrySelectOptionsMemoDependencies || !areEqualArrays(dependencies, this.countrySelectOptionsMemoDependencies)) {\n        this.countrySelectOptionsMemo = generator();\n        this.countrySelectOptionsMemoDependencies = dependencies;\n      }\n      return this.countrySelectOptionsMemo;\n    }\n  }, {\n    key: \"getFirstSupportedCountry\",\n    value: function getFirstSupportedCountry(_ref2) {\n      var countries = _ref2.countries;\n      var countryOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return countryOptions[0].value;\n    } // A shorthand for not passing `metadata` as a second argument.\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n        name = _this$props6.name,\n        disabled = _this$props6.disabled,\n        readOnly = _this$props6.readOnly,\n        autoComplete = _this$props6.autoComplete,\n        style = _this$props6.style,\n        className = _this$props6.className,\n        inputRef = _this$props6.inputRef,\n        inputComponent = _this$props6.inputComponent,\n        numberInputProps = _this$props6.numberInputProps,\n        smartCaret = _this$props6.smartCaret,\n        CountrySelectComponent = _this$props6.countrySelectComponent,\n        countrySelectProps = _this$props6.countrySelectProps,\n        ContainerComponent = _this$props6.containerComponent,\n        defaultCountry = _this$props6.defaultCountry,\n        countriesProperty = _this$props6.countries,\n        countryOptionsOrder = _this$props6.countryOptionsOrder,\n        labels = _this$props6.labels,\n        flags = _this$props6.flags,\n        flagComponent = _this$props6.flagComponent,\n        flagUrl = _this$props6.flagUrl,\n        addInternationalOption = _this$props6.addInternationalOption,\n        internationalIcon = _this$props6.internationalIcon,\n        displayInitialValueAsLocalNumber = _this$props6.displayInitialValueAsLocalNumber,\n        initialValueFormat = _this$props6.initialValueFormat,\n        onCountryChange = _this$props6.onCountryChange,\n        limitMaxLength = _this$props6.limitMaxLength,\n        countryCallingCodeEditable = _this$props6.countryCallingCodeEditable,\n        focusInputOnCountrySelection = _this$props6.focusInputOnCountrySelection,\n        reset = _this$props6.reset,\n        metadata = _this$props6.metadata,\n        international = _this$props6.international,\n        locales = _this$props6.locales,\n        rest = _objectWithoutProperties(_this$props6, _excluded);\n      var _this$state3 = this.state,\n        country = _this$state3.country,\n        countries = _this$state3.countries,\n        phoneDigits = _this$state3.phoneDigits,\n        isFocused = _this$state3.isFocused;\n      var InputComponent = smartCaret ? InputSmart : InputBasic;\n      var countrySelectOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return /*#__PURE__*/React.createElement(ContainerComponent, {\n        style: style,\n        className: classNames(className, 'PhoneInput', {\n          'PhoneInput--focus': isFocused,\n          'PhoneInput--disabled': disabled,\n          'PhoneInput--readOnly': readOnly\n        })\n      }, /*#__PURE__*/React.createElement(CountrySelectComponent, _extends({\n        name: name ? \"\".concat(name, \"Country\") : undefined,\n        \"aria-label\": labels.country\n      }, countrySelectProps, {\n        value: country,\n        options: countrySelectOptions,\n        onChange: this.onCountryChange,\n        onFocus: this.onCountryFocus,\n        onBlur: this.onCountryBlur,\n        disabled: disabled || countrySelectProps && countrySelectProps.disabled,\n        readOnly: readOnly || countrySelectProps && countrySelectProps.readOnly,\n        iconComponent: this.CountryIcon\n      })), /*#__PURE__*/React.createElement(InputComponent, _extends({\n        ref: this.setInputRef,\n        type: \"tel\",\n        autoComplete: autoComplete\n      }, numberInputProps, rest, {\n        name: name,\n        metadata: metadata,\n        country: country,\n        value: phoneDigits || '',\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        disabled: disabled,\n        readOnly: readOnly,\n        inputComponent: inputComponent,\n        className: classNames('PhoneInputInput', numberInputProps && numberInputProps.className, rest.className)\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value:\n    // `state` holds previous props as `props`, and also:\n    // * `country` — The currently selected country, e.g. `\"RU\"`.\n    // * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n    // * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\n    // (and a couple of other less significant properties)\n    function getDerivedStateFromProps(props, state) {\n      return _objectSpread({\n        // Emulate `prevProps` via `state.props`.\n        props: props\n      }, getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state));\n    }\n  }]);\n  return PhoneNumberInput_;\n}(React.PureComponent); // This wrapper is only to `.forwardRef()` to the `<input/>`.\n\nvar PhoneNumberInput = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(PhoneNumberInput_, _extends({}, props, {\n    inputRef: ref\n  }));\n});\nPhoneNumberInput.propTypes = {\n  /**\r\n   * Phone number in `E.164` format.\r\n   *\r\n   * Example:\r\n   *\r\n   * `\"+12223333333\"`\r\n   *\r\n   * Any \"falsy\" value like `undefined`, `null` or an empty string `\"\"` is treated like \"empty\".\r\n   */\n  value: PropTypes.string,\n  /**\r\n   * A function of `value: string?`.\r\n   *\r\n   * Updates the `value` property as the user inputs a phone number.\r\n   *\r\n   * If the user erases the input value, the argument is `undefined`.\r\n   */\n  onChange: PropTypes.func.isRequired,\n  /**\r\n   * Toggles the `--focus` CSS class.\r\n   * @ignore\r\n   */\n  onFocus: PropTypes.func,\n  /**\r\n   * `onBlur` is usually passed by `redux-form`.\r\n   * @ignore\r\n   */\n  onBlur: PropTypes.func,\n  /**\r\n   * Set to `true` to mark both the phone number `<input/>`\r\n   * and the country `<select/>` as `disabled`.\r\n   */\n  disabled: PropTypes.bool,\n  /**\r\n   * Set to `true` to mark both the phone number `<input/>`\r\n   * and the country `<select/>` as `readonly`.\r\n   */\n  readOnly: PropTypes.bool,\n  /**\r\n   * Sets `autoComplete` property for phone number `<input/>`.\r\n   *\r\n   * Web browser's \"autocomplete\" feature\r\n   * remembers the phone number being input\r\n   * and can also autofill the `<input/>`\r\n   * with previously remembered phone numbers.\r\n   *\r\n   * https://developers.google.com\r\n   * /web/updates/2015/06/checkout-faster-with-autofill\r\n   *\r\n   * For example, can be used to turn it off:\r\n   *\r\n   * \"So when should you use `autocomplete=\"off\"`?\r\n   *  One example is when you've implemented your own version\r\n   *  of autocomplete for search. Another example is any form field\r\n   *  where users will input and submit different kinds of information\r\n   *  where it would not be useful to have the browser remember\r\n   *  what was submitted previously\".\r\n   */\n  // (is `\"tel\"` by default)\n  autoComplete: PropTypes.string.isRequired,\n  /**\r\n   * Set to `\"national\"` to show the initial `value` in\r\n   * \"national\" format rather than \"international\".\r\n   *\r\n   * For example, if `initialValueFormat` is `\"national\"`\r\n   * and the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n   *\r\n   * By default, `initialValueFormat` is `undefined`,\r\n   * meaning that if the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n   *\r\n   * The reason for such default behaviour is that\r\n   * the newer generation grows up when there are no stationary phones\r\n   * and therefore everyone inputs phone numbers in international format\r\n   * in their smartphones so people gradually get more accustomed to\r\n   * writing phone numbers in international format rather than in local format.\r\n   * Future people won't be using \"national\" format, only \"international\".\r\n   */\n  // (is `undefined` by default)\n  initialValueFormat: PropTypes.oneOf(['national']),\n  // `displayInitialValueAsLocalNumber` property has been\n  // superceded by `initialValueFormat` property.\n  displayInitialValueAsLocalNumber: PropTypes.bool,\n  /**\r\n   * The country to be selected by default.\r\n   * For example, can be set after a GeoIP lookup.\r\n   *\r\n   * Example: `\"US\"`.\r\n   */\n  // A two-letter country code (\"ISO 3166-1 alpha-2\").\n  defaultCountry: PropTypes.string,\n  /**\r\n   * If specified, only these countries will be available for selection.\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"RU\", \"UA\", \"KZ\"]`\r\n   */\n  countries: PropTypes.arrayOf(PropTypes.string),\n  /**\r\n   * Custom country `<select/>` option names.\r\n   * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n   *\r\n   * See the `locales` directory for examples.\r\n   */\n  labels: labelsPropType.isRequired,\n  /**\r\n   * Country `<select/>` options are sorted by their labels.\r\n   * The default sorting function uses `a.localeCompare(b, locales)`,\r\n   * and, if that's not available, falls back to simple `a > b` / `a < b`.\r\n   * Some languages, like Chinese, support multiple sorting variants\r\n   * (called \"collations\"), and the user might prefer one or another.\r\n   * Also, sometimes the Operating System language is not always\r\n   * the preferred language for a person using a website or an application,\r\n   * so there should be a way to specify custom locale.\r\n   * This `locales` property mimicks the `locales` argument of `Intl` constructors,\r\n   * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\r\n   */\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  /*\r\n   * Custom country `<select/>` options sorting function.\r\n   * The default one uses `a.localeCompare(b)`, and,\r\n   * if that's not available, falls back to simple `a > b`/`a < b`.\r\n   * There have been requests to add custom sorter for cases\r\n   * like Chinese language and \"pinyin\" (non-default) sorting order.\r\n   * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\r\n  compareStrings: PropTypes.func,\r\n   */\n\n  /**\r\n   * A URL template of a country flag, where\r\n   * \"{XX}\" is a two-letter country code in upper case,\r\n   * or where \"{xx}\" is a two-letter country code in lower case.\r\n   * By default it points to `country-flag-icons` gitlab pages website.\r\n   * I imagine someone might want to download those country flag icons\r\n   * and host them on their own servers instead\r\n   * (all flags are available in the `country-flag-icons` library).\r\n   * There's a catch though: new countries may be added in future,\r\n   * so when hosting country flag icons on your own server\r\n   * one should check the `CHANGELOG.md` every time before updating this library,\r\n   * otherwise there's a possibility that some new country flag would be missing.\r\n   */\n  flagUrl: PropTypes.string.isRequired,\n  /**\r\n   * Custom country flag icon components.\r\n   * These flags will be used instead of the default ones.\r\n   * The the \"Flags\" section of the readme for more info.\r\n   *\r\n   * The shape is an object where keys are country codes\r\n   * and values are flag icon components.\r\n   * Flag icon components receive the same properties\r\n   * as `flagComponent` (see below).\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n   *\r\n   * Example:\r\n   *\r\n   * `import flags from 'country-flag-icons/react/3x2'`\r\n   *\r\n   * `import PhoneInput from 'react-phone-number-input'`\r\n   *\r\n   * `<PhoneInput flags={flags} .../>`\r\n   */\n  flags: PropTypes.objectOf(PropTypes.elementType),\n  /**\r\n   * Country flag icon component.\r\n   *\r\n   * Takes properties:\r\n   *\r\n   * * `country: string` — The country code.\r\n   * * `countryName: string` — The country name.\r\n   * * `flagUrl: string` — The `flagUrl` property (see above).\r\n   * * `flags: object` — The `flags` property (see above).\r\n   */\n  flagComponent: PropTypes.elementType.isRequired,\n  /**\r\n   * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n   */\n  addInternationalOption: PropTypes.bool.isRequired,\n  /**\r\n   * \"International\" icon component.\r\n   * Should have the same aspect ratio.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `title: string` — \"International\" country option label.\r\n   */\n  internationalIcon: PropTypes.elementType.isRequired,\n  /**\r\n   * Can be used to place some countries on top of the list of country `<select/>` options.\r\n   *\r\n   * * `\"XX\"` — inserts an option for \"XX\" country.\r\n   * * `\"🌐\"` — inserts \"International\" option.\r\n   * * `\"|\"` — inserts a separator.\r\n   * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n   */\n  countryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\n  /**\r\n   * `<Phone/>` component CSS style object.\r\n   */\n  style: PropTypes.object,\n  /**\r\n   * `<Phone/>` component CSS class.\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * Country `<select/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `name: string?` — HTML `name` attribute.\r\n   * * `value: string?` — The currently selected country code.\r\n   * * `onChange(value: string?)` — Updates the `value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n   * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n   * * `disabled: boolean?` — HTML `disabled` attribute.\r\n   * * `readOnly: boolean?` — HTML `readOnly` attribute.\r\n   * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n   * * `className: string` — CSS class name.\r\n   */\n  countrySelectComponent: PropTypes.elementType.isRequired,\n  /**\r\n   * Country `<select/>` component props.\r\n   * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n   * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n   */\n  countrySelectProps: PropTypes.object,\n  /**\r\n   * Phone number `<input/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `value: string` — The formatted `value`.\r\n   * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n   *\r\n   * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n   */\n  inputComponent: PropTypes.elementType.isRequired,\n  /**\r\n   * Wrapping `<div/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `style: object` — A component CSS style object.\r\n   * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\r\n   */\n  containerComponent: PropTypes.elementType.isRequired,\n  /**\r\n   * Phone number `<input/>` component props.\r\n   */\n  numberInputProps: PropTypes.object,\n  /**\r\n   * When the user attempts to insert a digit somewhere in the middle of a phone number,\r\n   * the caret position is moved right before the next available digit skipping\r\n   * any punctuation in between. This is called \"smart\" caret positioning.\r\n   * Another case would be the phone number format changing as a result of\r\n   * the user inserting the digit somewhere in the middle, which would require\r\n   * re-positioning the caret because all digit positions have changed.\r\n   * This \"smart\" caret positioning feature can be turned off by passing\r\n   * `smartCaret={false}` property: use it in case of any possible issues\r\n   * with caret position during phone number input.\r\n   */\n  // Is `true` by default.\n  smartCaret: PropTypes.bool.isRequired,\n  /**\r\n   * Set to `true` to force \"international\" phone number format.\r\n   * Set to `false` to force \"national\" phone number format.\r\n   * By default it's `undefined` meaning that it doesn't enforce any phone number format.\r\n   */\n  international: PropTypes.bool,\n  /**\r\n   * If set to `true`, the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: PropTypes.bool.isRequired,\n  /**\r\n   * If set to `false`, and `international` is `true`, then\r\n   * users won't be able to erase the \"country calling part\"\r\n   * of a phone number in the `<input/>`.\r\n   */\n  countryCallingCodeEditable: PropTypes.bool.isRequired,\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   *\r\n   * Can be used to pass custom `libphonenumber-js` metadata\r\n   * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n   */\n  metadata: metadataPropType.isRequired,\n  /**\r\n   * Is called every time the selected country changes:\r\n   * either programmatically or when user selects it manually from the list.\r\n   */\n  // People have been asking for a way to get the selected country.\n  // @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n  // For some it's just a \"business requirement\".\n  // I guess it's about gathering as much info on the user as a website can\n  // without introducing any addional fields that would complicate the form\n  // therefore reducing \"conversion\" (that's a marketing term).\n  // Assuming that the phone number's country is the user's country\n  // is not 100% correct but in most cases I guess it's valid.\n  onCountryChange: PropTypes.func,\n  /**\r\n   * If set to `false`, will not focus the `<input/>` component\r\n   * when the user selects a country from the list of countries.\r\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n   * Quote:\r\n   * \"On input: Changing the setting of any user interface component\r\n   *  does not automatically cause a change of context unless the user\r\n   *  has been advised of the behaviour before using the component.\"\r\n   */\n  focusInputOnCountrySelection: PropTypes.bool.isRequired\n};\nPhoneNumberInput.defaultProps = {\n  /**\r\n   * Remember (and autofill) the value as a phone number.\r\n   */\n  autoComplete: 'tel',\n  /**\r\n   * Country `<select/>` component.\r\n   */\n  countrySelectComponent: CountrySelect,\n  /**\r\n   * Flag icon component.\r\n   */\n  flagComponent: Flag,\n  /**\r\n   * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n   */\n  // Must be equal to `flagUrl` in `./CountryIcon.js`.\n  flagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n  /**\r\n   * Default \"International\" country `<select/>` option icon.\r\n   */\n  internationalIcon: InternationalIcon,\n  /**\r\n   * Phone number `<input/>` component.\r\n   */\n  inputComponent: 'input',\n  /**\r\n   * Wrapping `<div/>` component.\r\n   */\n  containerComponent: 'div',\n  /**\r\n   * Some users requested a way to reset the component:\r\n   * both number `<input/>` and country `<select/>`.\r\n   * Whenever `reset` property changes both number `<input/>`\r\n   * and country `<select/>` are reset.\r\n   * It's not implemented as some instance `.reset()` method\r\n   * because `ref` is forwarded to `<input/>`.\r\n   * It's also not replaced with just resetting `country` on\r\n   * external `value` reset, because a user could select a country\r\n   * and then not input any `value`, and so the selected country\r\n   * would be \"stuck\", if not using this `reset` property.\r\n   */\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n  reset: PropTypes.any,\n  /**\r\n   *\r\n   */\n\n  /**\r\n   * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n   */\n  smartCaret: true,\n  /**\r\n   * Whether to add the \"International\" option\r\n   * to the list of countries.\r\n   */\n  addInternationalOption: true,\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: false,\n  /**\r\n   * If set to `false`, and `international` is `true`, then\r\n   * users won't be able to erase the \"country calling part\"\r\n   * of a phone number in the `<input/>`.\r\n   */\n  countryCallingCodeEditable: true,\n  /**\r\n   * If set to `false`, will not focus the `<input/>` component\r\n   * when the user selects a country from the list of countries.\r\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n   * Quote:\r\n   * \"On input: Changing the setting of any user interface component\r\n   *  does not automatically cause a change of context unless the user\r\n   *  has been advised of the behaviour before using the component.\"\r\n   */\n  focusInputOnCountrySelection: true\n};\nexport default PhoneNumberInput;\nfunction areEqualArrays(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  var i = 0;\n  while (i < a.length) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_excluded","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_extends","assign","bind","hasOwnProperty","call","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","configurable","writable","_createClass","protoProps","staticProps","_inherits","subClass","superClass","create","value","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","result","NewTarget","Reflect","construct","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","React","PropTypes","classNames","InputSmart","InputBasic","CountrySelectWithIcon","CountrySelect","Flag","InternationalIcon","sortCountryOptions","isCountrySupportedWithError","getSupportedCountries","getSupportedCountryOptions","getCountries","createCountryIconComponent","metadata","metadataPropType","labels","labelsPropType","getPreSelectedCountry","getCountrySelectOptions","_getCountrySelectOptions","parsePhoneNumber","generateNationalNumberDigits","getPhoneDigitsForNewCountry","getInitialPhoneDigits","onPhoneDigitsChange","e164","getPhoneInputWithCountryStateUpdateFromNewProps","PhoneNumberInput_","_React$PureComponent","_super","_this","inputRef","current","ref","country","newCountry","_this$props","international","onChange","focusInputOnCountrySelection","_this$state","state","prevPhoneDigits","phoneDigits","prevCountry","newPhoneDigits","useNationalFormat","newValue","focus","setState","hasUserSelectedACountry","_phoneDigits","_this$props2","defaultCountry","addInternationalOption","limitMaxLength","countryCallingCodeEditable","_this$state2","countries","currentlySelectedCountry","_onPhoneDigitsChange","countryRequired","getAnyCountry","getFirstSupportedCountry","stateUpdate","forceRerender","isFocused","event","_onFocus","onFocus","onBlur","_onBlur","countrySelectProps","createRef","_this$props3","_value","_international","_addInternationalOption","displayInitialValueAsLocalNumber","initialValueFormat","_metadata","_this$props4","_defaultCountry","_countries","undefined","phoneNumber","CountryIcon","preSelectedCountry","required","componentDidMount","onCountryChange","selectedCountry","componentDidUpdate","prevProps","prevState","_ref","_this$props5","countryOptionsOrder","locales","useMemoCountrySelectOptions","countryNames","compareStringsLocales","generator","dependencies","countrySelectOptionsMemoDependencies","areEqualArrays","countrySelectOptionsMemo","_ref2","countryOptions","render","_this$props6","name","disabled","readOnly","autoComplete","style","className","inputComponent","numberInputProps","smartCaret","CountrySelectComponent","countrySelectComponent","ContainerComponent","containerComponent","countriesProperty","flags","flagComponent","flagUrl","internationalIcon","reset","rest","_this$state3","InputComponent","countrySelectOptions","createElement","concat","options","onCountryFocus","onCountryBlur","iconComponent","setInputRef","type","getDerivedStateFromProps","PureComponent","PhoneNumberInput","forwardRef","propTypes","string","func","isRequired","bool","oneOf","arrayOf","oneOfType","objectOf","elementType","defaultProps","any","a","b"],"sources":["C:/Users/rohit/OneDrive/Desktop/github_hashgate/Hashgate/node_modules/react-phone-number-input/modules/PhoneInputWithCountry.js"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nvar _excluded = [\"name\", \"disabled\", \"readOnly\", \"autoComplete\", \"style\", \"className\", \"inputRef\", \"inputComponent\", \"numberInputProps\", \"smartCaret\", \"countrySelectComponent\", \"countrySelectProps\", \"containerComponent\", \"defaultCountry\", \"countries\", \"countryOptionsOrder\", \"labels\", \"flags\", \"flagComponent\", \"flagUrl\", \"addInternationalOption\", \"internationalIcon\", \"displayInitialValueAsLocalNumber\", \"initialValueFormat\", \"onCountryChange\", \"limitMaxLength\", \"countryCallingCodeEditable\", \"focusInputOnCountrySelection\", \"reset\", \"metadata\", \"international\", \"locales\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport InputSmart from './InputSmart.js';\nimport InputBasic from './InputBasic.js';\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect.js';\nimport Flag from './Flag.js';\nimport InternationalIcon from './InternationalIcon.js';\nimport { sortCountryOptions, isCountrySupportedWithError, getSupportedCountries, getSupportedCountryOptions, getCountries } from './helpers/countries.js';\nimport { createCountryIconComponent } from './CountryIcon.js';\nimport { metadata as metadataPropType, labels as labelsPropType } from './PropTypes.js';\nimport { getPreSelectedCountry, getCountrySelectOptions as _getCountrySelectOptions, parsePhoneNumber, generateNationalNumberDigits, getPhoneDigitsForNewCountry, getInitialPhoneDigits, onPhoneDigitsChange, e164 } from './helpers/phoneInputHelpers.js';\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js';\n\nvar PhoneNumberInput_ = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(PhoneNumberInput_, _React$PureComponent);\n\n  var _super = _createSuper(PhoneNumberInput_);\n\n  function PhoneNumberInput_(props) {\n    var _this;\n\n    _classCallCheck(this, PhoneNumberInput_);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"setInputRef\", function (instance) {\n      _this.inputRef.current = instance;\n      var ref = _this.props.inputRef;\n\n      if (ref) {\n        if (typeof ref === 'function') {\n          ref(instance);\n        } else {\n          ref.current = instance;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isCountrySupportedWithError\", function (country) {\n      var metadata = _this.props.metadata;\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryChange\", function (newCountry) {\n      var _this$props = _this.props,\n          international = _this$props.international,\n          metadata = _this$props.metadata,\n          onChange = _this$props.onChange,\n          focusInputOnCountrySelection = _this$props.focusInputOnCountrySelection;\n      var _this$state = _this.state,\n          prevPhoneDigits = _this$state.phoneDigits,\n          prevCountry = _this$state.country; // After the new `country` has been selected,\n      // if the phone number `<input/>` holds any digits\n      // then migrate those digits for the new `country`.\n\n      var newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\n        prevCountry: prevCountry,\n        newCountry: newCountry,\n        metadata: metadata,\n        // Convert the phone number to \"national\" format\n        // when the user changes the selected country by hand.\n        useNationalFormat: !international\n      });\n      var newValue = e164(newPhoneDigits, newCountry, metadata); // Focus phone number `<input/>` upon country selection.\n\n      if (focusInputOnCountrySelection) {\n        _this.inputRef.current.focus();\n      } // If the user has already manually selected a country\n      // then don't override that already selected country\n      // if the `defaultCountry` property changes.\n      // That's what `hasUserSelectedACountry` flag is for.\n\n\n      _this.setState({\n        country: newCountry,\n        hasUserSelectedACountry: true,\n        phoneDigits: newPhoneDigits,\n        value: newValue\n      }, function () {\n        // Update the new `value` property.\n        // Doing it after the `state` has been updated\n        // because `onChange()` will trigger `getDerivedStateFromProps()`\n        // with the new `value` which will be compared to `state.value` there.\n        onChange(newValue);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (_phoneDigits) {\n      var _this$props2 = _this.props,\n          defaultCountry = _this$props2.defaultCountry,\n          onChange = _this$props2.onChange,\n          addInternationalOption = _this$props2.addInternationalOption,\n          international = _this$props2.international,\n          limitMaxLength = _this$props2.limitMaxLength,\n          countryCallingCodeEditable = _this$props2.countryCallingCodeEditable,\n          metadata = _this$props2.metadata;\n      var _this$state2 = _this.state,\n          countries = _this$state2.countries,\n          prevPhoneDigits = _this$state2.phoneDigits,\n          currentlySelectedCountry = _this$state2.country;\n\n      var _onPhoneDigitsChange = onPhoneDigitsChange(_phoneDigits, {\n        prevPhoneDigits: prevPhoneDigits,\n        country: currentlySelectedCountry,\n        countryRequired: !addInternationalOption,\n        defaultCountry: defaultCountry,\n        getAnyCountry: function getAnyCountry() {\n          return _this.getFirstSupportedCountry({\n            countries: countries\n          });\n        },\n        countries: countries,\n        international: international,\n        limitMaxLength: limitMaxLength,\n        countryCallingCodeEditable: countryCallingCodeEditable,\n        metadata: metadata\n      }),\n          phoneDigits = _onPhoneDigitsChange.phoneDigits,\n          country = _onPhoneDigitsChange.country,\n          value = _onPhoneDigitsChange.value;\n\n      var stateUpdate = {\n        phoneDigits: phoneDigits,\n        value: value,\n        country: country\n      };\n\n      if (countryCallingCodeEditable === false) {\n        // If it simply did `setState({ phoneDigits: intlPrefix })` here,\n        // then it would have no effect when erasing an inital international prefix\n        // via Backspace, because `phoneDigits` in `state` wouldn't change\n        // as a result, because it was `prefix` and it became `prefix`,\n        // so the component wouldn't rerender, and the user would be able\n        // to erase the country calling code part, and that part is\n        // assumed to be non-eraseable. That's why the component is\n        // forcefully rerendered here.\n        // https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\n        if (!value && phoneDigits === _this.state.phoneDigits) {\n          // Force a re-render of the `<input/>` in order to reset its value.\n          stateUpdate.forceRerender = {};\n        }\n      }\n\n      _this.setState(stateUpdate, // Update the new `value` property.\n      // Doing it after the `state` has been updated\n      // because `onChange()` will trigger `getDerivedStateFromProps()`\n      // with the new `value` which will be compared to `state.value` there.\n      function () {\n        return onChange(value);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onFocus\", function () {\n      return _this.setState({\n        isFocused: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onBlur\", function () {\n      return _this.setState({\n        isFocused: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function (event) {\n      _this._onFocus();\n\n      var onFocus = _this.props.onFocus;\n\n      if (onFocus) {\n        onFocus(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function (event) {\n      var onBlur = _this.props.onBlur;\n\n      _this._onBlur();\n\n      if (onBlur) {\n        onBlur(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryFocus\", function (event) {\n      _this._onFocus(); // this.setState({ countrySelectFocused: true })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onFocus = countrySelectProps.onFocus;\n\n        if (onFocus) {\n          onFocus(event);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryBlur\", function (event) {\n      _this._onBlur(); // this.setState({ countrySelectFocused: false })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onBlur = countrySelectProps.onBlur;\n\n        if (onBlur) {\n          onBlur(event);\n        }\n      }\n    });\n\n    _this.inputRef = /*#__PURE__*/React.createRef();\n    var _this$props3 = _this.props,\n        _value = _this$props3.value,\n        labels = _this$props3.labels,\n        _international = _this$props3.international,\n        _addInternationalOption = _this$props3.addInternationalOption,\n        displayInitialValueAsLocalNumber = _this$props3.displayInitialValueAsLocalNumber,\n        initialValueFormat = _this$props3.initialValueFormat,\n        _metadata = _this$props3.metadata;\n    var _this$props4 = _this.props,\n        _defaultCountry = _this$props4.defaultCountry,\n        _countries = _this$props4.countries; // Validate `defaultCountry`.\n\n    if (_defaultCountry) {\n      if (!_this.isCountrySupportedWithError(_defaultCountry)) {\n        _defaultCountry = undefined;\n      }\n    } // Validate `countries`.\n\n\n    _countries = getSupportedCountries(_countries, _metadata);\n    var phoneNumber = parsePhoneNumber(_value, _metadata);\n    _this.CountryIcon = createCountryIconComponent(_this.props);\n    var preSelectedCountry = getPreSelectedCountry({\n      value: _value,\n      phoneNumber: phoneNumber,\n      defaultCountry: _defaultCountry,\n      required: !_addInternationalOption,\n      countries: _countries || getCountries(_metadata),\n      getAnyCountry: function getAnyCountry() {\n        return _this.getFirstSupportedCountry({\n          countries: _countries\n        });\n      },\n      metadata: _metadata\n    });\n    _this.state = {\n      // Workaround for `this.props` inside `getDerivedStateFromProps()`.\n      props: _this.props,\n      // The country selected.\n      country: preSelectedCountry,\n      // `countries` are stored in `this.state` because they're filtered.\n      // For example, a developer might theoretically pass some unsupported\n      // countries as part of the `countries` property, and because of that\n      // the component uses `this.state.countries` (which are filtered)\n      // instead of `this.props.countries`\n      // (which could potentially contain unsupported countries).\n      countries: _countries,\n      // `phoneDigits` state property holds non-formatted user's input.\n      // The reason is that there's no way of finding out\n      // in which form should `value` be displayed: international or national.\n      // E.g. if `value` is `+78005553535` then it could be input\n      // by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n      // Hence storing just `value` is not sufficient for correct formatting.\n      // E.g. if a user entered `8 (800) 555-35-35`\n      // then value is `+78005553535` and `phoneDigits` are `88005553535`\n      // and if a user entered `+7 800 555 35 35`\n      // then value is `+78005553535` and `phoneDigits` are `+78005553535`.\n      phoneDigits: getInitialPhoneDigits({\n        value: _value,\n        phoneNumber: phoneNumber,\n        defaultCountry: _defaultCountry,\n        international: _international,\n        useNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n        metadata: _metadata\n      }),\n      // `value` property is duplicated in state.\n      // The reason is that `getDerivedStateFromProps()`\n      // needs this `value` to compare to the new `value` property\n      // to find out if `phoneDigits` needs updating:\n      // If the `value` property was changed externally\n      // then it won't be equal to `state.value`\n      // in which case `phoneDigits` and `country` should be updated.\n      value: _value\n    };\n    return _this;\n  }\n\n  _createClass(PhoneNumberInput_, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var onCountryChange = this.props.onCountryChange;\n      var defaultCountry = this.props.defaultCountry;\n      var selectedCountry = this.state.country;\n\n      if (onCountryChange) {\n        if (defaultCountry) {\n          if (!this.isCountrySupportedWithError(defaultCountry)) {\n            defaultCountry = undefined;\n          }\n        }\n\n        if (selectedCountry !== defaultCountry) {\n          onCountryChange(selectedCountry);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var onCountryChange = this.props.onCountryChange;\n      var country = this.state.country; // Call `onCountryChange` when user selects another country.\n\n      if (onCountryChange && country !== prevState.country) {\n        onCountryChange(country);\n      }\n    }\n  }, {\n    key: \"getCountrySelectOptions\",\n    value: function getCountrySelectOptions(_ref) {\n      var countries = _ref.countries;\n      var _this$props5 = this.props,\n          international = _this$props5.international,\n          countryCallingCodeEditable = _this$props5.countryCallingCodeEditable,\n          countryOptionsOrder = _this$props5.countryOptionsOrder,\n          addInternationalOption = _this$props5.addInternationalOption,\n          labels = _this$props5.labels,\n          locales = _this$props5.locales,\n          metadata = _this$props5.metadata;\n      return this.useMemoCountrySelectOptions(function () {\n        return sortCountryOptions(_getCountrySelectOptions({\n          countries: countries || getCountries(metadata),\n          countryNames: labels,\n          addInternationalOption: international && countryCallingCodeEditable === false ? false : addInternationalOption,\n          compareStringsLocales: locales // compareStrings\n\n        }), getSupportedCountryOptions(countryOptionsOrder, metadata));\n      }, [countries, countryOptionsOrder, addInternationalOption, labels, metadata]);\n    }\n  }, {\n    key: \"useMemoCountrySelectOptions\",\n    value: function useMemoCountrySelectOptions(generator, dependencies) {\n      if (!this.countrySelectOptionsMemoDependencies || !areEqualArrays(dependencies, this.countrySelectOptionsMemoDependencies)) {\n        this.countrySelectOptionsMemo = generator();\n        this.countrySelectOptionsMemoDependencies = dependencies;\n      }\n\n      return this.countrySelectOptionsMemo;\n    }\n  }, {\n    key: \"getFirstSupportedCountry\",\n    value: function getFirstSupportedCountry(_ref2) {\n      var countries = _ref2.countries;\n      var countryOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return countryOptions[0].value;\n    } // A shorthand for not passing `metadata` as a second argument.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          name = _this$props6.name,\n          disabled = _this$props6.disabled,\n          readOnly = _this$props6.readOnly,\n          autoComplete = _this$props6.autoComplete,\n          style = _this$props6.style,\n          className = _this$props6.className,\n          inputRef = _this$props6.inputRef,\n          inputComponent = _this$props6.inputComponent,\n          numberInputProps = _this$props6.numberInputProps,\n          smartCaret = _this$props6.smartCaret,\n          CountrySelectComponent = _this$props6.countrySelectComponent,\n          countrySelectProps = _this$props6.countrySelectProps,\n          ContainerComponent = _this$props6.containerComponent,\n          defaultCountry = _this$props6.defaultCountry,\n          countriesProperty = _this$props6.countries,\n          countryOptionsOrder = _this$props6.countryOptionsOrder,\n          labels = _this$props6.labels,\n          flags = _this$props6.flags,\n          flagComponent = _this$props6.flagComponent,\n          flagUrl = _this$props6.flagUrl,\n          addInternationalOption = _this$props6.addInternationalOption,\n          internationalIcon = _this$props6.internationalIcon,\n          displayInitialValueAsLocalNumber = _this$props6.displayInitialValueAsLocalNumber,\n          initialValueFormat = _this$props6.initialValueFormat,\n          onCountryChange = _this$props6.onCountryChange,\n          limitMaxLength = _this$props6.limitMaxLength,\n          countryCallingCodeEditable = _this$props6.countryCallingCodeEditable,\n          focusInputOnCountrySelection = _this$props6.focusInputOnCountrySelection,\n          reset = _this$props6.reset,\n          metadata = _this$props6.metadata,\n          international = _this$props6.international,\n          locales = _this$props6.locales,\n          rest = _objectWithoutProperties(_this$props6, _excluded);\n\n      var _this$state3 = this.state,\n          country = _this$state3.country,\n          countries = _this$state3.countries,\n          phoneDigits = _this$state3.phoneDigits,\n          isFocused = _this$state3.isFocused;\n      var InputComponent = smartCaret ? InputSmart : InputBasic;\n      var countrySelectOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return /*#__PURE__*/React.createElement(ContainerComponent, {\n        style: style,\n        className: classNames(className, 'PhoneInput', {\n          'PhoneInput--focus': isFocused,\n          'PhoneInput--disabled': disabled,\n          'PhoneInput--readOnly': readOnly\n        })\n      }, /*#__PURE__*/React.createElement(CountrySelectComponent, _extends({\n        name: name ? \"\".concat(name, \"Country\") : undefined,\n        \"aria-label\": labels.country\n      }, countrySelectProps, {\n        value: country,\n        options: countrySelectOptions,\n        onChange: this.onCountryChange,\n        onFocus: this.onCountryFocus,\n        onBlur: this.onCountryBlur,\n        disabled: disabled || countrySelectProps && countrySelectProps.disabled,\n        readOnly: readOnly || countrySelectProps && countrySelectProps.readOnly,\n        iconComponent: this.CountryIcon\n      })), /*#__PURE__*/React.createElement(InputComponent, _extends({\n        ref: this.setInputRef,\n        type: \"tel\",\n        autoComplete: autoComplete\n      }, numberInputProps, rest, {\n        name: name,\n        metadata: metadata,\n        country: country,\n        value: phoneDigits || '',\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        disabled: disabled,\n        readOnly: readOnly,\n        inputComponent: inputComponent,\n        className: classNames('PhoneInputInput', numberInputProps && numberInputProps.className, rest.className)\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: // `state` holds previous props as `props`, and also:\n    // * `country` — The currently selected country, e.g. `\"RU\"`.\n    // * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n    // * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\n    // (and a couple of other less significant properties)\n    function getDerivedStateFromProps(props, state) {\n      return _objectSpread({\n        // Emulate `prevProps` via `state.props`.\n        props: props\n      }, getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state));\n    }\n  }]);\n\n  return PhoneNumberInput_;\n}(React.PureComponent); // This wrapper is only to `.forwardRef()` to the `<input/>`.\n\n\nvar PhoneNumberInput = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(PhoneNumberInput_, _extends({}, props, {\n    inputRef: ref\n  }));\n});\nPhoneNumberInput.propTypes = {\n  /**\r\n   * Phone number in `E.164` format.\r\n   *\r\n   * Example:\r\n   *\r\n   * `\"+12223333333\"`\r\n   *\r\n   * Any \"falsy\" value like `undefined`, `null` or an empty string `\"\"` is treated like \"empty\".\r\n   */\n  value: PropTypes.string,\n\n  /**\r\n   * A function of `value: string?`.\r\n   *\r\n   * Updates the `value` property as the user inputs a phone number.\r\n   *\r\n   * If the user erases the input value, the argument is `undefined`.\r\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\r\n   * Toggles the `--focus` CSS class.\r\n   * @ignore\r\n   */\n  onFocus: PropTypes.func,\n\n  /**\r\n   * `onBlur` is usually passed by `redux-form`.\r\n   * @ignore\r\n   */\n  onBlur: PropTypes.func,\n\n  /**\r\n   * Set to `true` to mark both the phone number `<input/>`\r\n   * and the country `<select/>` as `disabled`.\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * Set to `true` to mark both the phone number `<input/>`\r\n   * and the country `<select/>` as `readonly`.\r\n   */\n  readOnly: PropTypes.bool,\n\n  /**\r\n   * Sets `autoComplete` property for phone number `<input/>`.\r\n   *\r\n   * Web browser's \"autocomplete\" feature\r\n   * remembers the phone number being input\r\n   * and can also autofill the `<input/>`\r\n   * with previously remembered phone numbers.\r\n   *\r\n   * https://developers.google.com\r\n   * /web/updates/2015/06/checkout-faster-with-autofill\r\n   *\r\n   * For example, can be used to turn it off:\r\n   *\r\n   * \"So when should you use `autocomplete=\"off\"`?\r\n   *  One example is when you've implemented your own version\r\n   *  of autocomplete for search. Another example is any form field\r\n   *  where users will input and submit different kinds of information\r\n   *  where it would not be useful to have the browser remember\r\n   *  what was submitted previously\".\r\n   */\n  // (is `\"tel\"` by default)\n  autoComplete: PropTypes.string.isRequired,\n\n  /**\r\n   * Set to `\"national\"` to show the initial `value` in\r\n   * \"national\" format rather than \"international\".\r\n   *\r\n   * For example, if `initialValueFormat` is `\"national\"`\r\n   * and the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n   *\r\n   * By default, `initialValueFormat` is `undefined`,\r\n   * meaning that if the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n   *\r\n   * The reason for such default behaviour is that\r\n   * the newer generation grows up when there are no stationary phones\r\n   * and therefore everyone inputs phone numbers in international format\r\n   * in their smartphones so people gradually get more accustomed to\r\n   * writing phone numbers in international format rather than in local format.\r\n   * Future people won't be using \"national\" format, only \"international\".\r\n   */\n  // (is `undefined` by default)\n  initialValueFormat: PropTypes.oneOf(['national']),\n  // `displayInitialValueAsLocalNumber` property has been\n  // superceded by `initialValueFormat` property.\n  displayInitialValueAsLocalNumber: PropTypes.bool,\n\n  /**\r\n   * The country to be selected by default.\r\n   * For example, can be set after a GeoIP lookup.\r\n   *\r\n   * Example: `\"US\"`.\r\n   */\n  // A two-letter country code (\"ISO 3166-1 alpha-2\").\n  defaultCountry: PropTypes.string,\n\n  /**\r\n   * If specified, only these countries will be available for selection.\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"RU\", \"UA\", \"KZ\"]`\r\n   */\n  countries: PropTypes.arrayOf(PropTypes.string),\n\n  /**\r\n   * Custom country `<select/>` option names.\r\n   * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n   *\r\n   * See the `locales` directory for examples.\r\n   */\n  labels: labelsPropType.isRequired,\n\n  /**\r\n   * Country `<select/>` options are sorted by their labels.\r\n   * The default sorting function uses `a.localeCompare(b, locales)`,\r\n   * and, if that's not available, falls back to simple `a > b` / `a < b`.\r\n   * Some languages, like Chinese, support multiple sorting variants\r\n   * (called \"collations\"), and the user might prefer one or another.\r\n   * Also, sometimes the Operating System language is not always\r\n   * the preferred language for a person using a website or an application,\r\n   * so there should be a way to specify custom locale.\r\n   * This `locales` property mimicks the `locales` argument of `Intl` constructors,\r\n   * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\r\n   */\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n  /*\r\n   * Custom country `<select/>` options sorting function.\r\n   * The default one uses `a.localeCompare(b)`, and,\r\n   * if that's not available, falls back to simple `a > b`/`a < b`.\r\n   * There have been requests to add custom sorter for cases\r\n   * like Chinese language and \"pinyin\" (non-default) sorting order.\r\n   * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\r\n  compareStrings: PropTypes.func,\r\n   */\n\n  /**\r\n   * A URL template of a country flag, where\r\n   * \"{XX}\" is a two-letter country code in upper case,\r\n   * or where \"{xx}\" is a two-letter country code in lower case.\r\n   * By default it points to `country-flag-icons` gitlab pages website.\r\n   * I imagine someone might want to download those country flag icons\r\n   * and host them on their own servers instead\r\n   * (all flags are available in the `country-flag-icons` library).\r\n   * There's a catch though: new countries may be added in future,\r\n   * so when hosting country flag icons on your own server\r\n   * one should check the `CHANGELOG.md` every time before updating this library,\r\n   * otherwise there's a possibility that some new country flag would be missing.\r\n   */\n  flagUrl: PropTypes.string.isRequired,\n\n  /**\r\n   * Custom country flag icon components.\r\n   * These flags will be used instead of the default ones.\r\n   * The the \"Flags\" section of the readme for more info.\r\n   *\r\n   * The shape is an object where keys are country codes\r\n   * and values are flag icon components.\r\n   * Flag icon components receive the same properties\r\n   * as `flagComponent` (see below).\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n   *\r\n   * Example:\r\n   *\r\n   * `import flags from 'country-flag-icons/react/3x2'`\r\n   *\r\n   * `import PhoneInput from 'react-phone-number-input'`\r\n   *\r\n   * `<PhoneInput flags={flags} .../>`\r\n   */\n  flags: PropTypes.objectOf(PropTypes.elementType),\n\n  /**\r\n   * Country flag icon component.\r\n   *\r\n   * Takes properties:\r\n   *\r\n   * * `country: string` — The country code.\r\n   * * `countryName: string` — The country name.\r\n   * * `flagUrl: string` — The `flagUrl` property (see above).\r\n   * * `flags: object` — The `flags` property (see above).\r\n   */\n  flagComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n   */\n  addInternationalOption: PropTypes.bool.isRequired,\n\n  /**\r\n   * \"International\" icon component.\r\n   * Should have the same aspect ratio.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `title: string` — \"International\" country option label.\r\n   */\n  internationalIcon: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Can be used to place some countries on top of the list of country `<select/>` options.\r\n   *\r\n   * * `\"XX\"` — inserts an option for \"XX\" country.\r\n   * * `\"🌐\"` — inserts \"International\" option.\r\n   * * `\"|\"` — inserts a separator.\r\n   * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n   */\n  countryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\n\n  /**\r\n   * `<Phone/>` component CSS style object.\r\n   */\n  style: PropTypes.object,\n\n  /**\r\n   * `<Phone/>` component CSS class.\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * Country `<select/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `name: string?` — HTML `name` attribute.\r\n   * * `value: string?` — The currently selected country code.\r\n   * * `onChange(value: string?)` — Updates the `value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n   * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n   * * `disabled: boolean?` — HTML `disabled` attribute.\r\n   * * `readOnly: boolean?` — HTML `readOnly` attribute.\r\n   * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n   * * `className: string` — CSS class name.\r\n   */\n  countrySelectComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Country `<select/>` component props.\r\n   * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n   * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n   */\n  countrySelectProps: PropTypes.object,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `value: string` — The formatted `value`.\r\n   * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n   *\r\n   * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n   */\n  inputComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Wrapping `<div/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `style: object` — A component CSS style object.\r\n   * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\r\n   */\n  containerComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Phone number `<input/>` component props.\r\n   */\n  numberInputProps: PropTypes.object,\n\n  /**\r\n   * When the user attempts to insert a digit somewhere in the middle of a phone number,\r\n   * the caret position is moved right before the next available digit skipping\r\n   * any punctuation in between. This is called \"smart\" caret positioning.\r\n   * Another case would be the phone number format changing as a result of\r\n   * the user inserting the digit somewhere in the middle, which would require\r\n   * re-positioning the caret because all digit positions have changed.\r\n   * This \"smart\" caret positioning feature can be turned off by passing\r\n   * `smartCaret={false}` property: use it in case of any possible issues\r\n   * with caret position during phone number input.\r\n   */\n  // Is `true` by default.\n  smartCaret: PropTypes.bool.isRequired,\n\n  /**\r\n   * Set to `true` to force \"international\" phone number format.\r\n   * Set to `false` to force \"national\" phone number format.\r\n   * By default it's `undefined` meaning that it doesn't enforce any phone number format.\r\n   */\n  international: PropTypes.bool,\n\n  /**\r\n   * If set to `true`, the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: PropTypes.bool.isRequired,\n\n  /**\r\n   * If set to `false`, and `international` is `true`, then\r\n   * users won't be able to erase the \"country calling part\"\r\n   * of a phone number in the `<input/>`.\r\n   */\n  countryCallingCodeEditable: PropTypes.bool.isRequired,\n\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   *\r\n   * Can be used to pass custom `libphonenumber-js` metadata\r\n   * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n   */\n  metadata: metadataPropType.isRequired,\n\n  /**\r\n   * Is called every time the selected country changes:\r\n   * either programmatically or when user selects it manually from the list.\r\n   */\n  // People have been asking for a way to get the selected country.\n  // @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n  // For some it's just a \"business requirement\".\n  // I guess it's about gathering as much info on the user as a website can\n  // without introducing any addional fields that would complicate the form\n  // therefore reducing \"conversion\" (that's a marketing term).\n  // Assuming that the phone number's country is the user's country\n  // is not 100% correct but in most cases I guess it's valid.\n  onCountryChange: PropTypes.func,\n\n  /**\r\n   * If set to `false`, will not focus the `<input/>` component\r\n   * when the user selects a country from the list of countries.\r\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n   * Quote:\r\n   * \"On input: Changing the setting of any user interface component\r\n   *  does not automatically cause a change of context unless the user\r\n   *  has been advised of the behaviour before using the component.\"\r\n   */\n  focusInputOnCountrySelection: PropTypes.bool.isRequired\n};\nPhoneNumberInput.defaultProps = {\n  /**\r\n   * Remember (and autofill) the value as a phone number.\r\n   */\n  autoComplete: 'tel',\n\n  /**\r\n   * Country `<select/>` component.\r\n   */\n  countrySelectComponent: CountrySelect,\n\n  /**\r\n   * Flag icon component.\r\n   */\n  flagComponent: Flag,\n\n  /**\r\n   * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n   */\n  // Must be equal to `flagUrl` in `./CountryIcon.js`.\n  flagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n\n  /**\r\n   * Default \"International\" country `<select/>` option icon.\r\n   */\n  internationalIcon: InternationalIcon,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   */\n  inputComponent: 'input',\n\n  /**\r\n   * Wrapping `<div/>` component.\r\n   */\n  containerComponent: 'div',\n\n  /**\r\n   * Some users requested a way to reset the component:\r\n   * both number `<input/>` and country `<select/>`.\r\n   * Whenever `reset` property changes both number `<input/>`\r\n   * and country `<select/>` are reset.\r\n   * It's not implemented as some instance `.reset()` method\r\n   * because `ref` is forwarded to `<input/>`.\r\n   * It's also not replaced with just resetting `country` on\r\n   * external `value` reset, because a user could select a country\r\n   * and then not input any `value`, and so the selected country\r\n   * would be \"stuck\", if not using this `reset` property.\r\n   */\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n  reset: PropTypes.any,\n\n  /**\r\n   *\r\n   */\n\n  /**\r\n   * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n   */\n  smartCaret: true,\n\n  /**\r\n   * Whether to add the \"International\" option\r\n   * to the list of countries.\r\n   */\n  addInternationalOption: true,\n\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: false,\n\n  /**\r\n   * If set to `false`, and `international` is `true`, then\r\n   * users won't be able to erase the \"country calling part\"\r\n   * of a phone number in the `<input/>`.\r\n   */\n  countryCallingCodeEditable: true,\n\n  /**\r\n   * If set to `false`, will not focus the `<input/>` component\r\n   * when the user selects a country from the list of countries.\r\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n   * Quote:\r\n   * \"On input: Changing the setting of any user interface component\r\n   *  does not automatically cause a change of context unless the user\r\n   *  has been advised of the behaviour before using the component.\"\r\n   */\n  focusInputOnCountrySelection: true\n};\nexport default PhoneNumberInput;\n\nfunction areEqualArrays(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  var i = 0;\n\n  while (i < a.length) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}\n//# sourceMappingURL=PhoneInputWithCountry.js.map"],"mappings":"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,EAAEhF,SAAS,CAACwJ,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC;EACjD;EACA;EACAzE,gCAAgC,EAAE/E,SAAS,CAACuJ,IAAI;EAEhD;AACF;AACA;AACA;AACA;AACA;EACE;EACAjG,cAAc,EAAEtD,SAAS,CAACoJ,MAAM;EAEhC;AACF;AACA;AACA;AACA;AACA;AACA;EACEzF,SAAS,EAAE3D,SAAS,CAACyJ,OAAO,CAACzJ,SAAS,CAACoJ,MAAM,CAAC;EAE9C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEpI,MAAM,EAAEC,cAAc,CAACqI,UAAU;EAEjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEnD,OAAO,EAAEnG,SAAS,CAAC0J,SAAS,CAAC,CAAC1J,SAAS,CAACoJ,MAAM,EAAEpJ,SAAS,CAACyJ,OAAO,CAACzJ,SAAS,CAACoJ,MAAM,CAAC,CAAC,CAAC;EAErF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEpB,OAAO,EAAEhI,SAAS,CAACoJ,MAAM,CAACE,UAAU;EAEpC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACExB,KAAK,EAAE9H,SAAS,CAAC2J,QAAQ,CAAC3J,SAAS,CAAC4J,WAAW,CAAC;EAEhD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE7B,aAAa,EAAE/H,SAAS,CAAC4J,WAAW,CAACN,UAAU;EAE/C;AACF;AACA;EACE/F,sBAAsB,EAAEvD,SAAS,CAACuJ,IAAI,CAACD,UAAU;EAEjD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACErB,iBAAiB,EAAEjI,SAAS,CAAC4J,WAAW,CAACN,UAAU;EAEnD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEpD,mBAAmB,EAAElG,SAAS,CAACyJ,OAAO,CAACzJ,SAAS,CAACoJ,MAAM,CAAC;EAExD;AACF;AACA;EACEhC,KAAK,EAAEpH,SAAS,CAAChF,MAAM;EAEvB;AACF;AACA;EACEqM,SAAS,EAAErH,SAAS,CAACoJ,MAAM;EAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE1B,sBAAsB,EAAE1H,SAAS,CAAC4J,WAAW,CAACN,UAAU;EAExD;AACF;AACA;AACA;AACA;EACE7E,kBAAkB,EAAEzE,SAAS,CAAChF,MAAM;EAEpC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEsM,cAAc,EAAEtH,SAAS,CAAC4J,WAAW,CAACN,UAAU;EAEhD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE1B,kBAAkB,EAAE5H,SAAS,CAAC4J,WAAW,CAACN,UAAU;EAEpD;AACF;AACA;EACE/B,gBAAgB,EAAEvH,SAAS,CAAChF,MAAM;EAElC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAwM,UAAU,EAAExH,SAAS,CAACuJ,IAAI,CAACD,UAAU;EAErC;AACF;AACA;AACA;AACA;EACEhH,aAAa,EAAEtC,SAAS,CAACuJ,IAAI;EAE7B;AACF;AACA;AACA;EACE/F,cAAc,EAAExD,SAAS,CAACuJ,IAAI,CAACD,UAAU;EAEzC;AACF;AACA;AACA;AACA;EACE7F,0BAA0B,EAAEzD,SAAS,CAACuJ,IAAI,CAACD,UAAU;EAErD;AACF;AACA;AACA;AACA;AACA;EACExI,QAAQ,EAAEC,gBAAgB,CAACuI,UAAU;EAErC;AACF;AACA;AACA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA3D,eAAe,EAAE3F,SAAS,CAACqJ,IAAI;EAE/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE7G,4BAA4B,EAAExC,SAAS,CAACuJ,IAAI,CAACD;AAC/C,CAAC;AACDL,gBAAgB,CAACY,YAAY,GAAG;EAC9B;AACF;AACA;EACE1C,YAAY,EAAE,KAAK;EAEnB;AACF;AACA;EACEO,sBAAsB,EAAErH,aAAa;EAErC;AACF;AACA;EACE0H,aAAa,EAAEzH,IAAI;EAEnB;AACF;AACA;EACE;EACA0H,OAAO,EAAE,sEAAsE;EAE/E;AACF;AACA;EACEC,iBAAiB,EAAE1H,iBAAiB;EAEpC;AACF;AACA;EACE+G,cAAc,EAAE,OAAO;EAEvB;AACF;AACA;EACEM,kBAAkB,EAAE,KAAK;EAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAM,KAAK,EAAElI,SAAS,CAAC8J,GAAG;EAEpB;AACF;AACA;;EAEE;AACF;AACA;EACEtC,UAAU,EAAE,IAAI;EAEhB;AACF;AACA;AACA;EACEjE,sBAAsB,EAAE,IAAI;EAE5B;AACF;AACA;AACA;EACEC,cAAc,EAAE,KAAK;EAErB;AACF;AACA;AACA;AACA;EACEC,0BAA0B,EAAE,IAAI;EAEhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEjB,4BAA4B,EAAE;AAChC,CAAC;AACD,eAAeyG,gBAAgB;AAE/B,SAASvC,cAAcA,CAACqD,CAAC,EAAEC,CAAC,EAAE;EAC5B,IAAID,CAAC,CAAC/N,MAAM,KAAKgO,CAAC,CAAChO,MAAM,EAAE;IACzB,OAAO,KAAK;EACd;EAEA,IAAIF,CAAC,GAAG,CAAC;EAET,OAAOA,CAAC,GAAGiO,CAAC,CAAC/N,MAAM,EAAE;IACnB,IAAI+N,CAAC,CAACjO,CAAC,CAAC,KAAKkO,CAAC,CAAClO,CAAC,CAAC,EAAE;MACjB,OAAO,KAAK;IACd;IAEAA,CAAC,EAAE;EACL;EAEA,OAAO,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}